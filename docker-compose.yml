services:
  backend:
    image: docker-spring-boot-postgres:latest
    env_file:
      - .env
    build:
      context: backend
    ports:
      - '8080:8080'
    depends_on:
      - db
    environment:
      POSTGRES_DATASOURCE: ${POSTGRES_DATASOURCE}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}

  frontend:
    build:
      context: ./frontend
    ports:
      - '3000:3000'
    depends_on:
      - app
    environment:
      API_URL: http://localhost:8080
    volumes:
      - ./frontend:/usr/src/app

  db:
    image: postgres:17
    env_file:
      - .env
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./wal_archive:/var/lib/postgresql/wal_archive
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    ports:
      - '${POSTGRES_PORT}:5432'
    healthcheck:
      test: [ 'CMD', 'pg_isready', '-U', '${POSTGRES_USER}' ]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres -c wal_level=replica
               -c archive_mode=on
               -c archive_command='cp %p /var/lib/postgresql/wal_archive/%f'
               -c archive_timeout=60

  flyway:
    image: flyway/flyway:latest
    depends_on:
      - app
    volumes:
      - ./db/migration:/flyway/sql
    environment:
      FLYWAY_URL: jdbc:postgresql://db:5432/${POSTGRES_DATABASE}
      FLYWAY_USER: ${POSTGRES_USER}
      FLYWAY_PASSWORD: ${POSTGRES_PASSWORD}
    entrypoint: [ "/bin/sh", "-c", "sleep 10 && flyway migrate" ]
    command: migrate

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    ports:
      - '8888:80'
    environment:
      PGADMIN_DEFAULT_EMAIL: user-name@domain-name.com
      PGADMIN_DEFAULT_PASSWORD: strong-password
    volumes:
      - pgadmin-data:/var/lib/pgadmin
      - ./backups:/backups

volumes:
  postgres-data:
  pgadmin-data: